{
  "version": 3,
  "file": "Sidebar.css",
  "sources": [
    "Profile.svelte",
    "Checkbox.svelte",
    "Input.svelte",
    "Label.svelte",
    "LoadingSpinner.svelte",
    "Select.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import { onDestroy, onMount } from \"svelte\";\nimport LoadingSpinner from \"../ui/LoadingSpinner.svelte\";\nimport Select from \"../ui/Select.svelte\";\nimport Input from \"../ui/Input.svelte\";\nimport Checkbox from \"../ui/Checkbox.svelte\";\nlet isLoading = true;\nlet noProfile = false;\nlet projectNotOpen = false;\nlet currentOperation = 'add';\nlet currentMetadata = 'class';\nlet metadataName = '';\nlet metadataRename = '';\nlet enabledValue = ['enabled'];\nlet includeFieldsValue = [];\nlet alphabetizeValue = [];\nlet permissionValue = [];\nlet permissions = [\n    { label: 'Create', value: 'c', show: true },\n    { label: 'Read', value: 'r', show: true },\n    { label: 'Edit', value: 'e', show: true },\n    { label: 'Delete', value: 'd', show: true },\n    { label: 'View All', value: 'v', show: true },\n    { label: 'Modify All', value: 'm', show: true }\n];\nlet perms = [];\nlet data = {\n    showMetadataRename: false,\n    showEnabled: false,\n    showPermissions: false,\n    showIncludeFields: false\n};\nlet folders = new Map();\nlet selectedProfiles = [];\nlet lastState = tsvscode.getState();\nif (lastState && !lastState.isLoading) {\n    isLoading = lastState.isLoading;\n    tsvscode.postMessage({\n        command: 'reload',\n        data: ''\n    });\n}\nfunction adjustOptionsOperation(operation) {\n    switch (operation) {\n        case \"add\": {\n            switch (currentMetadata) {\n                case \"class\":\n                case \"page\": {\n                    data.showEnabled = true;\n                    data.showMetadataRename = false;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n                case \"object\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = true;\n                    data.showIncludeFields = true;\n                    perms = permissions.map((m) => {\n                        return Object.assign(Object.assign({}, m), { show: true });\n                    });\n                    break;\n                }\n                case \"field\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = true;\n                    data.showIncludeFields = false;\n                    perms = permissions.map((m) => {\n                        if (m.value === 'r' || m.value === 'e') {\n                            return Object.assign(Object.assign({}, m), { show: true });\n                        }\n                        else {\n                            return Object.assign(Object.assign({}, m), { show: false });\n                        }\n                    });\n                    break;\n                }\n            }\n            break;\n        }\n        case \"edit\": {\n            switch (currentMetadata) {\n                case \"class\":\n                case \"page\": {\n                    data.showEnabled = true;\n                    data.showMetadataRename = true;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n                case \"object\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = true;\n                    data.showPermissions = true;\n                    data.showIncludeFields = false;\n                    perms = permissions.map((m) => {\n                        return Object.assign(Object.assign({}, m), { show: true });\n                    });\n                    break;\n                }\n                case \"field\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = true;\n                    data.showPermissions = true;\n                    data.showIncludeFields = false;\n                    perms = permissions.map((m) => {\n                        if (m.value === 'r' || m.value === 'e') {\n                            return Object.assign(Object.assign({}, m), { show: true });\n                        }\n                        else {\n                            return Object.assign(Object.assign({}, m), { show: false });\n                        }\n                    });\n                    break;\n                }\n            }\n            break;\n        }\n        case \"delete\": {\n            data.showEnabled = false;\n            data.showMetadataRename = false;\n            data.showPermissions = false;\n            data.showIncludeFields = false;\n            break;\n        }\n    }\n    return data;\n}\nfunction adjustOptionsMetadata(metadata) {\n    switch (metadata) {\n        case \"class\":\n        case \"page\": {\n            switch (currentOperation) {\n                case \"add\": {\n                    data.showEnabled = true;\n                    data.showMetadataRename = false;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n                case \"edit\": {\n                    data.showEnabled = true;\n                    data.showMetadataRename = true;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n                case \"delete\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n            }\n            break;\n        }\n        case \"object\": {\n            switch (currentOperation) {\n                case \"add\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = true;\n                    data.showIncludeFields = true;\n                    perms = permissions.map((m) => {\n                        return Object.assign(Object.assign({}, m), { show: true });\n                    });\n                    break;\n                }\n                case \"edit\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = true;\n                    data.showPermissions = true;\n                    data.showIncludeFields = false;\n                    perms = permissions.map((m) => {\n                        return Object.assign(Object.assign({}, m), { show: true });\n                    });\n                    break;\n                }\n                case \"delete\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = false;\n                    data.showIncludeFields = false;\n                    break;\n                }\n            }\n            break;\n        }\n        case \"field\": {\n            switch (currentOperation) {\n                case \"add\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = true;\n                    perms = permissions.map((m) => {\n                        if (m.value === 'r' || m.value === 'e') {\n                            return Object.assign(Object.assign({}, m), { show: true });\n                        }\n                        else {\n                            return Object.assign(Object.assign({}, m), { show: false });\n                        }\n                    });\n                    break;\n                }\n                case \"edit\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = true;\n                    data.showPermissions = true;\n                    perms = permissions.map((m) => {\n                        if (m.value === 'r' || m.value === 'e') {\n                            return Object.assign(Object.assign({}, m), { show: true });\n                        }\n                        else {\n                            return Object.assign(Object.assign({}, m), { show: false });\n                        }\n                    });\n                    break;\n                }\n                case \"delete\": {\n                    data.showEnabled = false;\n                    data.showMetadataRename = false;\n                    data.showPermissions = false;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return data;\n}\nconst modifyProfiles = () => {\n    let profileSelected = false;\n    for (const key in selectedProfiles) {\n        const profs = selectedProfiles[key];\n        if (profs.length > 0) {\n            profileSelected = true;\n        }\n    }\n    if (!profileSelected) {\n        tsvscode.postMessage({\n            command: 'onError',\n            data: 'Please select at least one profile to modify.'\n        });\n        return;\n    }\n    if (!metadataName || metadataName.trim() === '') {\n        tsvscode.postMessage({\n            command: 'onError',\n            data: 'Metadata name is required to modify profiles.'\n        });\n        return;\n    }\n    let command = `sfdx profile:${currentMetadata}:${currentOperation} -n ${metadataName}`;\n    if (currentOperation === 'edit') {\n        if (metadataRename && metadataRename.trim() !== '') {\n            command += ` -r ${metadataRename}`;\n        }\n    }\n    if (currentOperation !== 'delete') {\n        if (currentMetadata === 'class' || currentMetadata === 'page') {\n            if (enabledValue) {\n                command += ' -e';\n            }\n        }\n        if (currentMetadata === 'field' || currentMetadata === 'object') {\n            command += ' -m ';\n            if (currentMetadata === 'field' && !permissionValue.includes('r') && !permissionValue.includes('e')) {\n                command += 'no';\n            }\n            if (permissionValue.includes('r')) {\n                command += 'r';\n            }\n            if (permissionValue.includes('e')) {\n                command += 'e';\n            }\n        }\n        if (currentMetadata === 'object') {\n            if (!permissionValue.includes('r') && !permissionValue.includes('e') && !permissionValue.includes('c') && !permissionValue.includes('d') && !permissionValue.includes('v') && !permissionValue.includes('m')) {\n                command += 'no';\n            }\n            if (permissionValue.includes('c')) {\n                command += 'c';\n            }\n            if (permissionValue.includes('d')) {\n                command += 'd';\n            }\n            if (permissionValue.includes('v')) {\n                command += 'v';\n            }\n            if (permissionValue.includes('m')) {\n                command += 'm';\n            }\n        }\n    }\n    if (Object.keys(selectedProfiles).length) {\n        command += ' -p ';\n        let profilePaths = [];\n        for (const folder of Object.keys(selectedProfiles)) {\n            const profiles = selectedProfiles[folder];\n            for (const profile of profiles) {\n                profilePaths.push(`\"${folder}${profile}\"`);\n            }\n        }\n        if (profilePaths.length) {\n            command += profilePaths.join(\",\");\n        }\n    }\n    if (alphabetizeValue.length > 0) {\n        command += ' -a';\n    }\n    if (includeFieldsValue.length > 0) {\n        command += ' -f';\n    }\n    tsvscode.postMessage({\n        command: 'modify',\n        data: command\n    });\n    isLoading = true;\n};\n$: {\n    data = adjustOptionsOperation(currentOperation);\n    data = adjustOptionsMetadata(currentMetadata);\n}\nfunction onWindowMessage(event) {\n    const message = event.data;\n    switch (message.command) {\n        case 'profiles':\n            let folderData = Object();\n            for (const key in message.data) {\n                let profs = [...message.data[key]];\n                profs.sort((a, b) => (a > b ? 1 : -1));\n                message.data[key] = profs;\n                const options = message.data[key].map((f) => {\n                    return {\n                        label: f,\n                        value: f\n                    };\n                });\n                folderData[key] = options;\n                selectedProfiles[key] = [];\n            }\n            folders = new Map(Object.entries(folderData));\n            isLoading = false;\n            tsvscode.setState({ isLoading });\n            break;\n        case 'modify-complete':\n            isLoading = false;\n            break;\n        case 'no-profile':\n            isLoading = false;\n            noProfile = true;\n            break;\n        case 'project-not-open':\n            isLoading = false;\n            projectNotOpen = true;\n            break;\n    }\n}\nonMount(() => {\n    window.addEventListener(\"message\", onWindowMessage);\n});\nonDestroy(() => {\n    window.removeEventListener(\"message\", onWindowMessage);\n});\n</script>\n\n<style>\n    span {\n        display: block;\n        width: 100%;\n    }\n\n    span.permissions,\n    span.modify {\n        font-weight: bold;\n    }\n</style>\n\n<main>\n{#if isLoading}\n    <LoadingSpinner />\n{:else}\n    {#if projectNotOpen}\n        <p>There is no project file open. Please open an SFDX project folder with a valid sfdx-project.json file.</p>\n    {:else if noProfile}\n        <p>No profiles found in project structure. Please check that you have an SFDX project open and a valid sfdx-project.json file.</p>\n    {:else}\n        <form>\n            <div>\n                <Select\n                    required\n                    bind:value={currentOperation}\n                    label=\"Action to take\"\n                    name=\"operation\"\n                    many=\"false\"\n                    options={[{ value: 'add', label: 'Add' }, { value: 'edit', label: 'Edit' }, { value: 'delete', label: 'Delete' }]} \n                />\n            </div>\n            <div>\n                <Select\n                    required\n                    bind:value={currentMetadata}\n                    label=\"Metadata to modify\"\n                    name=\"metadata\"\n                    many=\"false\"\n                    options={[{ value: 'class', label: 'Apex Class' }, { value: 'page', label: 'Visualforce Page' }, { value: 'object', label: 'Object' }, { value: 'field', label: 'Field' }]} \n                />\n            </div>\n            <div>\n                <Input\n                    required\n                    name=\"name\"\n                    label=\"Metadata name\"\n                    bind:value={metadataName} \n                />\n            </div>\n            {#if data.showMetadataRename}\n                <div>\n                    <Input\n                        required\n                        name=\"rename\"\n                        label=\"Rename to\"\n                        bind:value={metadataRename} \n                    />\n                </div>\n            {/if}\n            {#if data.showEnabled}\n                <div>\n                    <Checkbox\n                        bind:value={enabledValue}\n                        options={[{ label: 'Enabled', value: 'enabled', show: true }]}\n                    />\n                </div>\n            {/if}\n            {#if data.showIncludeFields}\n                <div>\n                    <Checkbox\n                        bind:value={includeFieldsValue}\n                        options={[{ label: 'Add object fields too?', value: 'includeFields', show: true }]}\n                    />\n                </div>\n            {/if}\n            {#if data.showPermissions}\n                <div>\n                    <span class=\"permissions\">Permissions</span>\n                    <Checkbox\n                        bind:value={permissionValue}\n                        options={perms}\n                    />\n                </div>\n            {/if}\n            <div>\n                <span class=\"modify\">Profiles to modify</span>\n                <div>\n                    {#each [...folders] as [key, value]}\n                        <Select\n                            bind:value={selectedProfiles[key]}\n                            label={key}\n                            name={key}\n                            many=\"true\"\n                            options={value} \n                        />\n                    {/each}\n                </div>\n            </div>\n            <div>\n                <Checkbox\n                    bind:value={alphabetizeValue}\n                    options={[{ label: 'Alphabetize', value: 'alphabetize', show: true }]}\n                />\n            </div>\n            <button on:click|preventDefault={() => { modifyProfiles(); }}>MODIFY PROFILES</button>\n        </form>\n    {/if}\n{/if}\n</main>",
    "<script lang=\"ts\">export let value;\nexport let options;\n</script>\n\n<style>\n    div {\n        margin-bottom: 8px;\n    }\n    label {\n        display: block;\n        width: 100%;\n    }\n    input {\n        margin-left: 0px;\n        width: unset;\n    }\n</style>\n\n<div>\n    {#each options as opt}\n        {#if opt.show}\n            <label>\n                <input type=\"checkbox\" bind:group={value} value={opt.value} />\n                {opt.label}\n            </label>\n        {/if}\n    {/each}\n</div>",
    "<script lang=\"ts\">import Label from \"./Label.svelte\";\nexport let name;\nexport let label = \"\";\nexport let placeholder = \"\";\nexport let value;\nexport let min = undefined;\nexport let max = undefined;\nexport let required = false;\nexport let type = \"text\";\nexport let textArea = false;\n</script>\n  \n<style>\n    input {\n      margin-top: 4px;\n    }\n\n  input[type='text'] {\n      display: block;\n      width: 100%;\n      margin-bottom: 5px;\n      border: 1px solid #aaa;\n      padding: 3px;\n  }\n</style>\n  \n<Label {name} {label}>\n    {#if textArea}\n      <textarea {placeholder} {required} {name} id={name} bind:value />\n    {:else}\n      <input\n        {placeholder}\n        {required}\n        {name}\n        {type}\n        {min}\n        {max}\n        {value}\n        id={name}\n        on:input={(e) => {\n          // @ts-ignore\n          value = type.match(/^(number|range)$/) ? +e.target.value : e.target.value;\n        }} />\n    {/if}\n</Label>",
    "  \n<script lang=\"ts\">export let name;\nexport let label;\n</script>\n  \n<style>\n    div {\n      padding-bottom: 4px;\n      display: block;\n      width: 100%;\n    }\n    label {\n      font-weight: bold;\n      font-size: calc(var(--vscode-font-size) * 0.9);\n    }\n</style>\n  \n{#if label}\n    <div><label for={name}>{label}</label></div>\n{/if}\n<slot />",
    "<style>\n    .spinner {\n      margin: 100px auto;\n      width: 50px;\n      height: 40px;\n      text-align: center;\n      font-size: 10px;\n    }\n    .spinner > div {\n      background-color: var(--vscode-textLink-foreground);\n      height: 100%;\n      width: 6px;\n      display: inline-block;\n      -webkit-animation: sk-stretchdelay 1.2s infinite ease-in-out;\n      animation: sk-stretchdelay 1.2s infinite ease-in-out;\n    }\n    .spinner .rect2 {\n      -webkit-animation-delay: -1.1s;\n      animation-delay: -1.1s;\n    }\n    .spinner .rect3 {\n      -webkit-animation-delay: -1s;\n      animation-delay: -1s;\n    }\n    .spinner .rect4 {\n      -webkit-animation-delay: -0.9s;\n      animation-delay: -0.9s;\n    }\n    .spinner .rect5 {\n      -webkit-animation-delay: -0.8s;\n      animation-delay: -0.8s;\n    }\n    @-webkit-keyframes sk-stretchdelay {\n      0%,\n      40%,\n      100% {\n        -webkit-transform: scaleY(0.4);\n      }\n      20% {\n        -webkit-transform: scaleY(1);\n      }\n    }\n    @keyframes sk-stretchdelay {\n      0%,\n      40%,\n      100% {\n        transform: scaleY(0.4);\n        -webkit-transform: scaleY(0.4);\n      }\n      20% {\n        transform: scaleY(1);\n        -webkit-transform: scaleY(1);\n      }\n    }\n  </style>\n  \n  <div class=\"spinner\">\n    <div class=\"rect1\" />\n    <div class=\"rect2\" />\n    <div class=\"rect3\" />\n    <div class=\"rect4\" />\n    <div class=\"rect5\" />\n  </div>\n  ",
    "<script lang=\"ts\">import Label from \"./Label.svelte\";\nexport let required = false;\nexport let name;\nexport let label = \"\";\nexport let value;\nexport let many;\nexport let options;\n</script>\n  \n<style>\n    select {\n      background: var(--vscode-input-background);\n      color: var(--vscode-input-foreground);\n      padding: 3px;\n      display: block;\n      width: 100%;\n      margin-bottom: 5px;\n    }\n    select:hover {\n      cursor: pointer;\n    }\n</style>\n  \n<Label {name} {label}>\n  {#if many === \"true\"}\n    <select {required} {name} id={name} bind:value multiple>\n      {#each options as o}\n        <option value={o.value}>{o.label}</option>\n      {/each}\n    </select>\n  {:else}\n    <select {required} {name} id={name} bind:value>\n      {#each options as o}\n        <option value={o.value}>{o.label}</option>\n      {/each}\n    </select>\n  {/if}\n</Label>"
  ],
  "names": [],
  "mappings": "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"
}